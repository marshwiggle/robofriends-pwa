{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","e","mail","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","Header","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","isPedning","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","payloadd","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0ad235f4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n     return (\n          <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n               <img alt = 'robots' src={`https://robohash.org/${id}?size=200x200`} />\n               <div>\n                    <h2> {name} </h2>\n                    <p> {email} </p>\n               </div>\n          </div>\n     );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n     return (\n             <div>\n                  {  \n                    robots.map((user,i) => {\n                          return <Card \n                                    key={i} \n                                    id={robots[i].id} \n                                    name={robots[i].name} e\n                                    mail={robots[i].email}\n                                 />\n                     })\n                   }\n             </div>\n     );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n     return (\n          <div className='pa2'>\n                  <input \n                       className =  'pa3 ba b--green bg-lightest-blue'\n                       type='search' \n                       placeholder='search robots' \n                       onChange = { searchChange }\n                  />\n          </div>\n     );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\n// There are props, state and chlidren in React.\n\nconst Scroll = (props) => {\n     return (\n          <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n             { props.children }\n          </div>\n    );\n\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n     constructor(props){\n          super(props);\n          this.state = {\n               hasError: false\n          }\n     }\n\n     componentDidCatch(error, info){\n          this.setState({ hasError: true})\n     }\n\n     render(){\n          if (this.state.hasError){\n               return <h1> Oooooops. That is not good </h1>\n          }\n          return this.props.children\n     }\n};\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n     constructor(){\n          super();\n          this.state = {\n               count: 0\n          }\n     }\n\n   \n     shouldComponentUpdate(nextProps, nextState){\n          if (this.state.count !== nextState.count){\n               return true\n          }\n          return false;\n     }\n\n     updateCount = () => {\n          this.setState(state => { \n               return {count: this.state.count + 1} // Beacause state is async\n              })\n     }\n\n     render(){\n           console.log('Header');      \n           return (\n               <button color={this.props.color} onClick={this.updateCount}>\n                    Count: {this.state.count} \n               </button>\n           );\n     }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton  from './CounterButton';\n\nclass Header extends Component {\n//     shouldComponentUpdate(nextProps, nextState){\n//          return false; // Do not update on render\n//     }\n\n     render(){\n           console.log('Header');      \n           return(\n               <div>\n                       <h1 className='f1'> RoboFriends </h1>\n                       <CounterButton color={'red'} />\n               </div>\n           );\n     }\n}\n\nexport default Header;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n     return {\n          searchField: state.searchRobots.searchField,\n          robots: state.requestRobots.robots,\n          isPending: state.requestRobots.isPedning,\n          error: state.requestRobots.error\n     }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n     return {\n          onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n          onRequestRobots: () =>  dispatch(requestRobots())\n     }\n}\n\n\nclass App extends Component { \n     \n     componentDidMount(){\n          this.props.onRequestRobots();\n     }\n\n     render(){\n           //  const { robots } = this.state;\n             const { searchField, onSearchChange, robots, isPending} = this.props;\n             const filterRobots = robots.filter(robot => {\n                 return robot.name.toLowerCase().includes(searchField.toLowerCase());\n             });\n             return(\n               <div className='tc'>\n                 <Header />\n                 <SearchBox searchChange={ onSearchChange } />\n                 <Scroll>\n                     {   isPending ? <h1> Loading </h1> :\n                           <ErrorBoundry>\n                             <CardList robots={filterRobots}/>\n                           </ErrorBoundry>\n                     };\n                </Scroll>\n             </div>\n             )\n     }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n     CHANGE_SEARCH_FIELD,\n     REQUEST_ROBOTS_PENDING,\n     REQUEST_ROBOTS_SUCCESS,\n     REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n     type: CHANGE_SEARCH_FIELD,\n     payload: text\n})\n\n\n// We need redux-thunk middleware to process the following code\nexport const requestRobots = () => (dispatch) => {\n     dispatch({ type: REQUEST_ROBOTS_PENDING }); // No Payload\n     fetch('https://jsonplaceholder.typicode.com/users')\n       .then(response => response.json())\n       .then( data =>  dispatch( {type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n       .catch( error => dispatch( {type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \n     CHANGE_SEARCH_FIELD,\n     REQUEST_ROBOTS_PENDING,\n     REQUEST_ROBOTS_SUCCESS,\n     REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n     searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n     switch(action.type){\n          case CHANGE_SEARCH_FIELD:\n               return Object.assign({},  state, { searchField: action.payload } );\n               //Optional syntax\n               // return {...state, searchField: action.payload)\n          default:\n               return state;\n     }\n} \n\n//We don't want to put all the logic into one reducer\n\n\nconst initialStateRobots = {\n     isPending: false,\n     robots: [],\n     error: ''\n}\n\n\nexport const requestRobots = (state = initialStateRobots, action={}) => {\n     switch(action.type) {\n          case REQUEST_ROBOTS_PENDING:\n               return Object.assign({}, state, { isPending: true });\n          case REQUEST_ROBOTS_SUCCESS:\n               return Object.assign({}, state, { robots: action.payload, isPending: false });\n          case REQUEST_ROBOTS_FAILED:\n               return Object.assign({}, state, { error: action.payloadd, isPending: false });\n          default:\n               return state;\n     }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst logger = createLogger();\n\nconst  rootReducer = combineReducers({ searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store = { store }> \n          <App />\n     </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}